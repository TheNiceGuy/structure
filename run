#!/bin/bash
#
# Copyright 2015 (c)
# Gabriel-Andrew Pollo Guilbert
#
# This is a simple script that will compile
# and run a project.
#
# SYNTAX
#
# To run a project:
#     ./run [OPTIONS...] <PROJECT'S PATH>

SUCCESS=0
ERROR=1
PROJECT=
MAKECMD="run "
MAKEOPTS=""
EXECUTE=true

function help {
	echo -e "Usage: ./run [OPTIONS...] <PROJECT'S PATH>"
	echo -e ""
	echo -e "Options:"
	echo -e "\t-r, --run:\t run the binary [default]"
	echo -e "\t-d, --debug:\t run the binary in debugging"
	echo -e "\t-b, --build:\t only build the project"
	echo -e "\t-h, --help:\t show this message"
	echo -e ""
	echo -e "Environment variables:"
	echo -e "\tCC:\tc++ compiler"
	echo -e "\tLD:\tc++ linker"
	echo -e "\tDB:\tbinary debugger"
}

function parse_arg {
	for ARG in "$@"; do
		case "$ARG" in
		"-r" | "--run")
			MAKECMD="run "
			export CCFLAGS+=
			export LDFLAGS+=
			;;
		"-d" | "--debug")
			MAKECMD="debug "
			export CCFLAGS=-g
			export LDFLAGS=
			;;
		"-b" | "--build")
			EXECUTE=false
			;;
		"-h" | "--help")
			help
			return $ERROR
			;;
		*)
			if [[ $ARG == ${!#} ]]; then
				PROJECT=${!#}
			else
				echo -e "Unrecognized option '$ARG'"
				echo -e "Try '--help' for more information."
				return $ERROR
			fi
			;;
		esac
	done

	return $SUCCESS
}

function parse_env {
	if [[ -n $CC ]]; then
		MAKEOPTS+="CC=$CC "
	fi

	if [[ -n $LD ]]; then
		MAKEOPTS+="LD=$LD "
	fi

	if [[ -n $DB ]]; then
		MAKECMD+="DB=$DB "
	fi
}

function main {
	parse_arg $@
	if [[ $? == $ERROR ]]; then
		return $ERROR
	fi

	parse_env

	if [[ ! -d $PROJECT ]]; then
		echo -e "ERROR: The specified folder doesn't exist."
		return $ERROR
	else
		cd $PROJECT
	fi

	if [[ ! -f ./makefile ]]; then
		echo -e "ERROR: No makefile found."
		return $ERROR
	else
		make mkdir
	fi

	make clean
	make $MAKEOPTS
	if [[ $? == 0 ]]; then
		if [[ $EXECUTE == true ]]; then
			make $MAKECMD
		fi
	else
		echo "ERROR: The project didn't compile."
		exit $ERROR
	fi
}

main $@
